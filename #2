from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives import hashes

# Generación de las llaves del cliente
private_key_client = ec.generate_private_key(ec.SECP256R1(), default_backend())
public_key_client = private_key_client.public_key()

# Serialización de la llave pública a bytes
public_key_bytes_client = public_key_client.public_bytes(
    encoding=serialization.Encoding.X962,
    format=serialization.PublicFormat.UncompressedPoint
)

# Generación de las llaves del servidor
private_key_server = ec.generate_private_key(ec.SECP256R1(), default_backend())
public_key_server = private_key_server.public_key()

# Serialización de la llave pública a bytes
public_key_bytes_server = public_key_server.public_bytes(
    encoding=serialization.Encoding.X962,
    format=serialization.PublicFormat.UncompressedPoint
)

# Intercambio de llaves
shared_key_client = private_key_client.exchange(ec.ECDH(), public_key_server)
shared_key_server = private_key_server.exchange(ec.ECDH(), public_key_client)

# Derivación de la llave simétrica
derived_key_client = hashes.Hash(hashes.SHA256(), backend=default_backend())
derived_key_client.update(shared_key_client)
symmetric_key_client = derived_key_client.finalize()

derived_key_server = hashes.Hash(hashes.SHA256(), backend=default_backend())
derived_key_server.update(shared_key_server)
symmetric_key_server = derived_key_server.finalize()

print("Llave simétrica derivada en el cliente:", symmetric_key_client.hex())
print("Llave simétrica derivada en el servidor:", symmetric_key_server.hex())

from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives import hashes

# Generación de las llaves del cliente
private_key_client = ec.generate_private_key(ec.SECP256R1(), default_backend())
public_key_client = private_key_client.public_key()

# Serialización de la llave pública a bytes
public_key_bytes_client = public_key_client.public_bytes(
    encoding=serialization.Encoding.PEM,  # Cambiamos a PEM para compatibilidad
    format=serialization.PublicFormat.SubjectPublicKeyInfo
)

# Generación de las llaves del servidor
private_key_server = ec.generate_private_key(ec.SECP256R1(), default_backend())
public_key_server = private_key_server.public_key()

# Serialización de la llave pública a bytes
public_key_bytes_server = public_key_server.public_bytes(
    encoding=serialization.Encoding.PEM,  # Cambiamos a PEM para compatibilidad
    format=serialization.PublicFormat.SubjectPublicKeyInfo
)

# Intercambio de llaves
shared_key_client = private_key_client.exchange(ec.ECDH(), public_key_server)
shared_key_server = private_key_server.exchange(ec.ECDH(), public_key_client)

# Derivación de la llave simétrica
derived_key_client = hashes.Hash(hashes.SHA256(), backend=default_backend())
derived_key_client.update(shared_key_client)
symmetric_key_client = derived_key_client.finalize()

derived_key_server = hashes.Hash(hashes.SHA256(), backend=default_backend())
derived_key_server.update(shared_key_server)
symmetric_key_server = derived_key_server.finalize()

print("Llave simétrica derivada en el cliente:", symmetric_key_client.hex())
print("Llave simétrica derivada en el servidor:", symmetric_key_server.hex())

# Simulación del ataque MitM
def mitm_attack(public_key_bytes_client, public_key_bytes_server, private_key_attacker):
    # Cargar las llaves públicas desde los bytes
    public_key_client = serialization.load_pem_public_key(public_key_bytes_client, backend=default_backend())
    public_key_server = serialization.load_pem_public_key(public_key_bytes_server, backend=default_backend())
    
    # Simulamos el ataque reemplazando las llaves
    intercepted_key_client = public_key_server  # El atacante usa la llave del servidor
    intercepted_key_server = public_key_client  # El atacante usa la llave del cliente

    # Ahora se generan las llaves compartidas
    shared_key_attacker_to_client = private_key_attacker.exchange(ec.ECDH(), intercepted_key_client)
    shared_key_attacker_to_server = private_key_attacker.exchange(ec.ECDH(), intercepted_key_server)

    # Deriv

